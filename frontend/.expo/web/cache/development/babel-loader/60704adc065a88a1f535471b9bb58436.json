{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ColumnChartItem from \"./column-chart-item\";\nimport { initData, drawYAxis, drawYAxisLabels, drawGuideLine, numberWithCommas, drawXAxis, drawXAxisLabels } from \"../common\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ColumnChart = function (_Component) {\n  _inherits(ColumnChart, _Component);\n\n  var _super = _createSuper(ColumnChart);\n\n  function ColumnChart(props) {\n    var _this;\n\n    _classCallCheck(this, ColumnChart);\n\n    _this = _super.call(this, props);\n    var defaultGap = _this.props.defaultColumnWidth + _this.props.defaultColumnMargin;\n    var newState = initData(_this.props.data, _this.props.height, defaultGap, _this.props.numberOfYAxisGuideLine);\n    _this.state = {\n      sortedData: newState.sortedData,\n      max: newState.max,\n      selectedIndex: null,\n      fadeAnim: new Animated.Value(0),\n      guideArray: newState.guideArray,\n      gap: defaultGap\n    };\n    _this.renderColumns = _this.renderColumns.bind(_assertThisInitialized(_this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.drawTooltip = _this.drawTooltip.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ColumnChart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.data !== this.props.data) {\n        this.setState(_extends({\n          fadeAnim: new Animated.Value(0)\n        }, initData(nextProps.data, this.props.height, this.state.gap, this.props.numberOfYAxisGuideLine)), function () {\n          Animated.timing(_this2.state.fadeAnim, {\n            toValue: 1,\n            easing: Easing.bounce,\n            duration: 1000,\n            useNativeDriver: true\n          }).start();\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Animated.timing(this.state.fadeAnim, {\n        toValue: 1,\n        easing: Easing.bounce,\n        duration: 1000,\n        useNativeDriver: true\n      }).start();\n    }\n  }, {\n    key: \"renderColumns\",\n    value: function renderColumns(fadeAnim) {\n      var _this3 = this;\n\n      var seriesArray = this.state.sortedData;\n      var seriesCount = seriesArray.length;\n      var renderColumns = [];\n\n      if (seriesCount > 0) {\n        var standardSeries = seriesArray[0];\n        var dataCount = standardSeries.data.length;\n\n        var _loop = function _loop(i) {\n          renderColumns.push(_jsx(ColumnChartItem, {\n            seriesArray: _this3.state.sortedData,\n            dataIndex: i,\n            defaultWidth: _this3.props.defaultColumnWidth,\n            defaultHeight: _this3.props.height + 20,\n            defaultMargin: _this3.props.defaultColumnMargin,\n            isSelected: _this3.state.selectedIndex === i,\n            highlightColor: _this3.props.highlightColor,\n            onClick: function onClick(evt) {\n              return _this3.handleClick(evt, i);\n            }\n          }, i));\n        };\n\n        for (var i = 0; i < dataCount; i++) {\n          _loop(i);\n        }\n      }\n\n      return _jsx(Animated.View, {\n        style: [styles.chartView, {\n          transform: [{\n            scaleY: fadeAnim\n          }],\n          marginBottom: this.props.minValue && this.state.guideArray && this.state.guideArray.length > 0 ? -1 * this.state.guideArray[0][2] * this.props.minValue : null\n        }],\n        children: renderColumns\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, index) {\n      var _this4 = this;\n\n      this.setState({\n        selectedIndex: index\n      }, function () {\n        if (typeof _this4.props.onPress === 'function') {\n          _this4.props.onPress(index);\n        }\n      });\n    }\n  }, {\n    key: \"drawTooltip\",\n    value: function drawTooltip(selectedIndex) {\n      if (typeof selectedIndex === 'number' && selectedIndex >= 0) {\n        var standardSeries = this.state.sortedData[0];\n\n        if (!standardSeries) {\n          console.warn('standardSeries is null');\n          return null;\n        }\n\n        var seriesCount = this.state.sortedData.length;\n        var plusGap = 10 * seriesCount;\n\n        if (this.state.sortedData.length === 1) {\n          plusGap = 0;\n        } else if (selectedIndex === standardSeries.data.length - 1) {\n          plusGap = -50;\n        }\n\n        var left = standardSeries.data[selectedIndex]['gap'] + plusGap;\n        var tooltipRenders = [];\n\n        for (var i = 0; i < this.state.sortedData.length; i++) {\n          var series = this.state.sortedData[i];\n\n          if (series.data[selectedIndex]['x']) {\n            tooltipRenders.push(_jsx(Text, {\n              style: styles.tooltipTitle,\n              children: series.data[selectedIndex]['x']\n            }, 'tooltipTitle-' + i));\n          }\n\n          tooltipRenders.push(_jsxs(View, {\n            style: {\n              flexDirection: 'row',\n              paddingLeft: 5,\n              alignItems: 'center'\n            },\n            children: [_jsx(View, {\n              style: [styles.tooltipColor, {\n                backgroundColor: !series.seriesColor ? this.props.primaryColor : series.seriesColor\n              }]\n            }), _jsx(Text, {\n              style: styles.tooltipValue,\n              children: numberWithCommas(series.data[selectedIndex]['y'], false)\n            })]\n          }, 'tooltipText-' + i));\n        }\n\n        return _jsx(View, {\n          style: [styles.tooltipWrapper, {\n            left: left\n          }],\n          children: _jsx(View, {\n            style: styles.tooltip,\n            children: tooltipRenders\n          })\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fadeAnim = this.state.fadeAnim;\n      if (this.state.sortedData && this.state.sortedData.length === 0) return null;\n      return _jsxs(View, {\n        style: StyleSheet.flatten([styles.wrapper, {\n          backgroundColor: this.props.backgroundColor\n        }]),\n        children: [_jsx(View, {\n          style: {\n            paddingRight: 5\n          },\n          children: drawYAxisLabels(this.state.guideArray, this.props.height + 20, this.props.minValue, this.props.labelColor)\n        }), _jsx(View, {\n          style: styles.mainContainer,\n          children: _jsxs(ScrollView, {\n            horizontal: true,\n            children: [_jsxs(View, {\n              children: [_jsxs(View, {\n                ref: \"chartView\",\n                style: styles.chartContainer,\n                children: [drawYAxis(this.props.yAxisColor), drawGuideLine(this.state.guideArray, this.props.yAxisGridLineColor), this.renderColumns(fadeAnim)]\n              }), drawXAxis(this.props.xAxisColor), _jsx(View, {\n                style: {\n                  marginLeft: this.props.defaultColumnWidth / 2\n                },\n                children: drawXAxisLabels(this.state.sortedData[0].data, this.state.gap, this.props.labelColor, this.props.showEvenNumberXaxisLabel)\n              })]\n            }), this.drawTooltip(this.state.selectedIndex)]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return ColumnChart;\n}(Component);\n\nexport { ColumnChart as default };\nvar styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden'\n  },\n  mainContainer: {\n    paddingBottom: 0,\n    paddingLeft: 0,\n    paddingRight: 0,\n    height: '100%'\n  },\n  chartContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    margin: 0,\n    paddingRight: 10,\n    overflow: 'hidden'\n  },\n  chartView: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    height: '100%'\n  },\n  tooltipWrapper: {\n    position: 'absolute',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tooltip: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 5,\n    borderColor: '#AAAAAA',\n    borderWidth: 1,\n    padding: 3,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.8\n  },\n  tooltipTitle: {\n    fontSize: 10\n  },\n  tooltipValue: {\n    fontWeight: 'bold',\n    fontSize: 15\n  },\n  tooltipColor: {\n    width: 10,\n    height: 5,\n    marginRight: 3,\n    borderRadius: 2\n  }\n});\nColumnChart.propTypes = {\n  data: PropTypes.array\n};\nColumnChart.defaultProps = {\n  data: [],\n  height: 100,\n  defaultColumnWidth: 40,\n  defaultColumnMargin: 20,\n  primaryColor: '#297AB1',\n  highlightColor: 'red',\n  showEvenNumberXaxisLabel: true\n};","map":{"version":3,"sources":["E:/Documents/Semester 7/MAD/Project/client/node_modules/react-native-pure-chart/examples/pure-chart/components/column-chart.js"],"names":["React","Component","PropTypes","ColumnChartItem","initData","drawYAxis","drawYAxisLabels","drawGuideLine","numberWithCommas","drawXAxis","drawXAxisLabels","ColumnChart","props","defaultGap","defaultColumnWidth","defaultColumnMargin","newState","data","height","numberOfYAxisGuideLine","state","sortedData","max","selectedIndex","fadeAnim","Animated","Value","guideArray","gap","renderColumns","bind","handleClick","drawTooltip","nextProps","setState","timing","toValue","easing","Easing","bounce","duration","useNativeDriver","start","seriesArray","seriesCount","length","standardSeries","dataCount","i","push","highlightColor","evt","styles","chartView","transform","scaleY","marginBottom","minValue","event","index","onPress","console","warn","plusGap","left","tooltipRenders","series","tooltipTitle","flexDirection","paddingLeft","alignItems","tooltipColor","backgroundColor","seriesColor","primaryColor","tooltipValue","tooltipWrapper","tooltip","StyleSheet","flatten","wrapper","paddingRight","labelColor","mainContainer","chartContainer","yAxisColor","yAxisGridLineColor","xAxisColor","marginLeft","showEvenNumberXaxisLabel","create","overflow","paddingBottom","margin","position","justifyContent","borderRadius","borderColor","borderWidth","padding","opacity","fontSize","fontWeight","width","marginRight","propTypes","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { View, StyleSheet, Animated, ScrollView, Easing, Text } from 'react-native'\nimport ColumnChartItem from './column-chart-item'\nimport {initData, drawYAxis, drawYAxisLabels, drawGuideLine, numberWithCommas, drawXAxis, drawXAxisLabels} from '../common'\n\nexport default class ColumnChart extends Component {\n  constructor (props) {\n    super(props)\n    let defaultGap = this.props.defaultColumnWidth + this.props.defaultColumnMargin\n    let newState = initData(this.props.data, this.props.height, defaultGap, this.props.numberOfYAxisGuideLine)\n    this.state = {\n      sortedData: newState.sortedData,\n      max: newState.max,\n      selectedIndex: null,\n      fadeAnim: new Animated.Value(0),\n      guideArray: newState.guideArray,\n      gap: defaultGap\n    }\n    this.renderColumns = this.renderColumns.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.drawTooltip = this.drawTooltip.bind(this)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.setState(Object.assign({\n        fadeAnim: new Animated.Value(0)\n      }, initData(nextProps.data, this.props.height, this.state.gap, this.props.numberOfYAxisGuideLine)), () => {\n        Animated.timing(this.state.fadeAnim, { toValue: 1, easing: Easing.bounce, duration: 1000, useNativeDriver: true }).start()\n      })\n    }\n  }\n\n  componentDidMount () {\n    Animated.timing(this.state.fadeAnim, {\n      toValue: 1, easing: Easing.bounce, duration: 1000, useNativeDriver: true\n    }).start()\n  }\n\n  renderColumns (fadeAnim) {\n    let seriesArray = this.state.sortedData\n    let seriesCount = seriesArray.length\n    let renderColumns = []\n    if (seriesCount > 0) {\n      let standardSeries = seriesArray[0]\n      let dataCount = standardSeries.data.length\n      for (let i = 0; i < dataCount; i++) {\n        renderColumns.push(\n          <ColumnChartItem key={i} seriesArray={this.state.sortedData}\n            dataIndex={i}\n            defaultWidth={this.props.defaultColumnWidth}\n            defaultHeight={this.props.height + 20}\n            defaultMargin={this.props.defaultColumnMargin}\n            isSelected={this.state.selectedIndex === i}\n            highlightColor={this.props.highlightColor}\n            onClick={(evt) => this.handleClick(evt, i)} />\n        )\n      }\n    }\n    return (\n      <Animated.View style={[styles.chartView, {\n        transform: [{scaleY: fadeAnim}],\n        marginBottom: this.props.minValue && this.state.guideArray && this.state.guideArray.length > 0 ? -1 * this.state.guideArray[0][2] * this.props.minValue : null\n      }]}>\n        {renderColumns}\n      </Animated.View>\n    )\n  }\n\n  handleClick (event, index) {\n    this.setState({\n      selectedIndex: index\n    }, () => {\n      if (typeof this.props.onPress === 'function') {\n        this.props.onPress(index)\n      }\n    })\n  }\n  drawTooltip (selectedIndex) {\n    if (typeof (selectedIndex) === 'number' && selectedIndex >= 0) {\n      let standardSeries = this.state.sortedData[0]\n      if (!standardSeries) {\n        console.warn('standardSeries is null')\n        return null\n      }\n\n      let seriesCount = this.state.sortedData.length\n      let plusGap = 10 * seriesCount\n      if (this.state.sortedData.length === 1) {\n        plusGap = 0\n      } else if (selectedIndex === standardSeries.data.length - 1) {\n        plusGap = -50\n      }\n      // 차트 width를 마지막에 늘려야겠음.\n\n      let left = standardSeries.data[selectedIndex]['gap'] + plusGap\n      let tooltipRenders = []\n      for (let i = 0; i < this.state.sortedData.length; i++) {\n        let series = this.state.sortedData[i]\n        if (series.data[selectedIndex]['x']) {\n          tooltipRenders.push(<Text key={'tooltipTitle-' + i} style={styles.tooltipTitle}>{series.data[selectedIndex]['x']}</Text>)\n        }\n        tooltipRenders.push(\n          <View key={'tooltipText-' + i} style={{flexDirection: 'row', paddingLeft: 5, alignItems: 'center'}}>\n            <View style={[styles.tooltipColor, {backgroundColor: !series.seriesColor ? this.props.primaryColor : series.seriesColor}]} />\n            <Text style={styles.tooltipValue}>{numberWithCommas(series.data[selectedIndex]['y'], false)}</Text>\n          </View>\n        )\n      }\n      return (\n        <View style={[styles.tooltipWrapper, { left: left }]}>\n          <View style={styles.tooltip}>\n            {tooltipRenders}\n          </View>\n        </View>\n      )\n    } else {\n      return null\n    }\n  }\n\n  render () {\n    let {fadeAnim} = this.state\n    if (this.state.sortedData && this.state.sortedData.length === 0) return null\n\n    return (\n      <View style={StyleSheet.flatten([styles.wrapper, {\n        backgroundColor: this.props.backgroundColor\n      }])}>\n        <View style={{paddingRight: 5}}>\n          {drawYAxisLabels(this.state.guideArray, this.props.height + 20, this.props.minValue, this.props.labelColor)}\n        </View>\n        <View style={styles.mainContainer}>\n          <ScrollView horizontal>\n            <View>\n              <View ref='chartView' style={styles.chartContainer}>\n                {drawYAxis(this.props.yAxisColor)}\n                {drawGuideLine(this.state.guideArray, this.props.yAxisGridLineColor)}\n                {this.renderColumns(fadeAnim)}\n              </View>\n              {drawXAxis(this.props.xAxisColor)}\n              <View style={{ marginLeft: this.props.defaultColumnWidth / 2 }}>\n                {drawXAxisLabels(this.state.sortedData[0].data, this.state.gap, this.props.labelColor, this.props.showEvenNumberXaxisLabel)}\n              </View>\n            </View>\n            {this.drawTooltip(this.state.selectedIndex)}\n          </ScrollView>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden'\n  },\n  mainContainer: {\n    paddingBottom: 0,\n    paddingLeft: 0,\n    paddingRight: 0,\n    height: '100%'\n  },\n  chartContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    margin: 0,\n    paddingRight: 10,\n    overflow: 'hidden'\n  },\n  chartView: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    height: '100%'\n  },\n  tooltipWrapper: {\n    position: 'absolute',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tooltip: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 5,\n    borderColor: '#AAAAAA',\n    borderWidth: 1,\n    padding: 3,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.8\n  },\n  tooltipTitle: {fontSize: 10},\n  tooltipValue: {fontWeight: 'bold', fontSize: 15},\n  tooltipColor: {\n    width: 10,\n    height: 5,\n    marginRight: 3,\n    borderRadius: 2\n  }\n})\n\nColumnChart.propTypes = {\n  data: PropTypes.array\n}\nColumnChart.defaultProps = {\n  data: [],\n  height: 100,\n  defaultColumnWidth: 40,\n  defaultColumnMargin: 20,\n  primaryColor: '#297AB1',\n  highlightColor: 'red',\n  showEvenNumberXaxisLabel: true\n}\n"]},"metadata":{},"sourceType":"module"}