{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { Text, Block, Button } from 'galio-framework';\nimport { DateTimePickerAndroid } from '@react-native-community/datetimepicker';\nimport styles from \"../../styles/styles\";\nimport ItemCard from \"./ItemCard\";\nimport { useRoute } from '@react-navigation/native';\nimport axiosInstance from \"../../services/AxiosInstance\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Items = function Items(props) {\n  var route = useRoute();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      items = _useState4[0],\n      setItems = _useState4[1];\n\n  var _useState5 = useState({\n    from: new Date(new Date().getDate() - 30),\n    to: new Date()\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dateRange = _useState6[0],\n      setDateRange = _useState6[1];\n\n  var isDateValid = function isDateValid(from, to) {\n    fromFixed = from.setUTCHours(0, 0, 0, 0);\n    toFixed = to.setUTCHours(0, 0, 0, 0);\n\n    if (fromFixed.getTime() <= toFixed.getTime()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  var onDateChange = function onDateChange(event, selectedDate, field) {\n    if (field === \"from\") {\n      console.log(field);\n      setDateRange(_objectSpread(_objectSpread({}, dateRange), {}, _defineProperty({}, field, selectedDate)));\n    } else {\n      setDateRange(_objectSpread(_objectSpread({}, dateRange), {}, _defineProperty({}, field, selectedDate)));\n    }\n\n    getItems();\n  };\n\n  var getFromDate = function getFromDate() {\n    DateTimePickerAndroid.open({\n      value: dateRange.from,\n      onChange: function onChange(event, selectedDate) {\n        onDateChange(event, selectedDate, \"from\");\n      },\n      mode: \"date\"\n    });\n  };\n\n  var getToDate = function getToDate() {\n    DateTimePickerAndroid.open({\n      value: dateRange.to,\n      onChange: function onChange(event, selectedDate) {\n        onDateChange(event, selectedDate, \"to\");\n      },\n      mode: \"date\"\n    });\n  };\n\n  var getFormattedDate = function getFormattedDate(dt) {\n    dt.getFullYear() + \"-\" + (dt.getMonth() + 1) + \"-\" + dt.getDate();\n    return dt;\n  };\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return _jsx(ItemCard, {\n      data: item,\n      navigation: props.navigation,\n      detailsScreen: props.detailsScreen\n    }, index);\n  };\n\n  var getItems = function getItems(from, to) {\n    axiosInstance.post(route.name.toLocaleLowerCase() + \"/get\", {\n      from: getFormattedDate(dateRange.from),\n      to: getFormattedDate(dateRange.to)\n    }).then(function (res) {\n      setItems(res.data);\n    }).catch(function (e) {\n      console.log(\"error fetching items\");\n    });\n  };\n\n  useEffect(function () {\n    var dateOffset = 24 * 60 * 60 * 1000 * 30;\n    var offsetDate = new Date();\n    offsetDate.setTime(offsetDate.getTime() - dateOffset);\n    setDateRange(_objectSpread(_objectSpread({}, dateRange), {}, {\n      from: offsetDate\n    }));\n    getItems();\n  }, []);\n  return _jsxs(View, {\n    children: [_jsxs(View, {\n      style: styles.flexContainerRow,\n      children: [_jsx(View, {\n        style: styles.flexItem,\n        children: _jsx(TouchableHighlight, {\n          style: styles.card,\n          underlayColor: \"#91F334\",\n          onPress: function onPress() {\n            getFromDate();\n          },\n          children: _jsxs(Text, {\n            style: styles.h2,\n            children: [_jsx(Text, {\n              style: {\n                fontWeight: \"bold\"\n              },\n              children: \"From:\"\n            }), _jsx(Text, {\n              children: dateRange.from.toLocaleDateString(\"en-us\")\n            })]\n          })\n        })\n      }), _jsx(View, {\n        style: styles.flexItem,\n        children: _jsx(TouchableHighlight, {\n          style: styles.card,\n          underlayColor: \"#34AEF3\",\n          onPress: function onPress() {\n            getToDate();\n          },\n          children: _jsxs(Text, {\n            style: styles.h2,\n            children: [_jsx(Text, {\n              style: {\n                fontWeight: \"bold\"\n              },\n              children: \"To:\"\n            }), _jsx(Text, {\n              children: dateRange.to.toLocaleDateString(\"en-us\")\n            })]\n          })\n        })\n      })]\n    }), _jsx(View, {\n      children: _jsx(FlatList, {\n        data: items,\n        renderItem: renderItem,\n        refreshControl: _jsx(RefreshControl, {\n          onRefresh: function onRefresh() {\n            getItems();\n            setRefreshing(false);\n          },\n          refreshing: refreshing\n        })\n      })\n    })]\n  });\n};\n\nexport default Items;","map":{"version":3,"sources":["E:/Documents/Semester 7/MAD/Project/client/components/Items/Items.jsx"],"names":["React","useState","useEffect","Text","Block","Button","DateTimePickerAndroid","styles","ItemCard","useRoute","axiosInstance","Items","props","route","refreshing","setRefreshing","items","setItems","from","Date","getDate","to","dateRange","setDateRange","isDateValid","fromFixed","setUTCHours","toFixed","getTime","onDateChange","event","selectedDate","field","console","log","getItems","getFromDate","open","value","onChange","mode","getToDate","getFormattedDate","dt","getFullYear","getMonth","renderItem","item","index","navigation","detailsScreen","post","name","toLocaleLowerCase","then","res","data","catch","e","dateOffset","offsetDate","setTime","flexContainerRow","flexItem","card","h2","fontWeight","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { useState , useEffect} from 'react';\r\nimport { View, SafeAreaView, TouchableHighlight , FlatList, ScrollView, RefreshControl} from \"react-native\"\r\nimport { Text, Block,Button } from 'galio-framework'\r\nimport {DateTimePickerAndroid} from '@react-native-community/datetimepicker'\r\nimport styles from '../../styles/styles'\r\nimport ItemCard from './ItemCard'\r\nimport {useRoute} from '@react-navigation/native';\r\n\r\nimport axiosInstance from '../../services/AxiosInstance'\r\n// can be expenses or assets\r\n// props.type  == 'expenses' | 'assets'\r\n\r\n\r\nconst Items = (props)=>{\r\n    const route = useRoute()\r\n    const [refreshing, setRefreshing] = useState(false)\r\n    const [items, setItems] = useState([])\r\n    const [dateRange, setDateRange] = useState({from:new Date((new Date()).getDate()-30), to: new Date()})\r\n    \r\n    \r\n    const isDateValid = (from, to)=>{\r\n     \r\n        fromFixed = from.setUTCHours(0, 0, 0, 0);\r\n\r\n        toFixed = to.setUTCHours(0, 0, 0, 0);\r\n        if (fromFixed.getTime() <= toFixed.getTime()){\r\n            \r\n            return true\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    const onDateChange = (event, selectedDate, field) => {\r\n        if (field === \"from\"){\r\n            console.log(field)\r\n            setDateRange({...dateRange, [field]:selectedDate});\r\n           \r\n\r\n        }else{\r\n            setDateRange({...dateRange, [field]:selectedDate});\r\n        }\r\n        getItems()\r\n      };\r\n\r\n    const getFromDate = ()=>{\r\n        DateTimePickerAndroid.open({\r\n            value:dateRange.from,\r\n            onChange:(event, selectedDate)=>{onDateChange(event, selectedDate, \"from\")},\r\n            mode:\"date\"\r\n        })\r\n        \r\n    }\r\n    const getToDate = ()=>{\r\n        DateTimePickerAndroid.open({\r\n            value:dateRange.to,\r\n            onChange:(event, selectedDate)=>{onDateChange(event, selectedDate, \"to\")},\r\n            mode:\"date\"\r\n        })\r\n    }\r\n    const getFormattedDate = (dt)=>{\r\n        \r\n        dt.getFullYear() + \"-\" + (dt.getMonth() + 1) + \"-\" + dt.getDate();\r\n        return dt\r\n    }\r\n    const renderItem = ({item, index})=>{\r\n        return <ItemCard data={item} key={index} navigation={props.navigation} detailsScreen={props.detailsScreen}/>\r\n    }\r\n    const getItems = (from, to)=>{\r\n        axiosInstance.post(`${route.name.toLocaleLowerCase()}/get`, {from:getFormattedDate(dateRange.from), to:getFormattedDate(dateRange.to)}).then(res=>{\r\n            setItems(res.data)\r\n        }).catch(e=>{\r\n            console.log(\"error fetching items\")\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var dateOffset = (24*60*60*1000) * 30; \r\n        var offsetDate = new Date();\r\n        offsetDate.setTime(offsetDate.getTime() - dateOffset);\r\n        setDateRange({...dateRange, from:offsetDate})\r\n        getItems()\r\n    },[])\r\n    return (\r\n        <View>\r\n            <View style={styles.flexContainerRow}>\r\n                    <View style={styles.flexItem}>\r\n                        <TouchableHighlight\r\n                            style={styles.card}\r\n                            underlayColor=\"#91F334\"\r\n                            onPress={() => {getFromDate()}}\r\n                        >\r\n                            <Text style={styles.h2}>\r\n                                <Text style={{fontWeight:\"bold\"}}>  \r\n                                From:\r\n                                </Text>\r\n                                <Text>\r\n                                    {dateRange.from.toLocaleDateString(\"en-us\")}\r\n                                </Text>\r\n                            </Text>\r\n                        </TouchableHighlight>\r\n                    </View>\r\n                    <View style={styles.flexItem}>\r\n                        <TouchableHighlight\r\n                            style={styles.card}\r\n                            underlayColor=\"#34AEF3\"\r\n                            onPress={() => {getToDate()}}\r\n                        >\r\n                            <Text style={styles.h2}>\r\n                                <Text style={{fontWeight:\"bold\"}}>  \r\n                                To:\r\n                                </Text>\r\n                                <Text>\r\n                                    {dateRange.to.toLocaleDateString(\"en-us\")}\r\n                                </Text>\r\n                            </Text>\r\n                        </TouchableHighlight>\r\n                    </View>\r\n            </View>\r\n            <View>\r\n                   <FlatList \r\n                        data={items} \r\n                        renderItem={renderItem}\r\n                        refreshControl={<RefreshControl onRefresh={()=>{\r\n                            getItems()\r\n                            setRefreshing(false)\r\n                        }} refreshing={refreshing} />}\r\n                        />\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\nexport default Items\r\n"]},"metadata":{},"sourceType":"module"}