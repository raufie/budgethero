{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { initData, drawYAxis, drawGuideLine, drawYAxisLabels, numberWithCommas, drawXAxis, drawXAxisLabels } from \"../common\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LineChart = function (_React$Component) {\n  _inherits(LineChart, _React$Component);\n\n  var _super = _createSuper(LineChart);\n\n  function LineChart(props) {\n    var _this;\n\n    _classCallCheck(this, LineChart);\n\n    _this = _super.call(this, props);\n    var newState = initData(_this.props.data, _this.props.height, _this.props.gap, _this.props.numberOfYAxisGuideLine);\n    _this.state = {\n      loading: false,\n      sortedData: newState.sortedData,\n      selectedIndex: null,\n      nowHeight: 200,\n      nowWidth: 200,\n      scrollPosition: 0,\n      nowX: 0,\n      nowY: 0,\n      max: newState.max,\n      fadeAnim: new Animated.Value(0),\n      guideArray: newState.guideArray\n    };\n    _this.drawCoordinates = _this.drawCoordinates.bind(_assertThisInitialized(_this));\n    _this.drawCoordinate = _this.drawCoordinate.bind(_assertThisInitialized(_this));\n    _this.drawSelected = _this.drawSelected.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LineChart, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextState.sortedData !== this.state.sortedData || nextState.selectedIndex !== this.state.selectedIndex || nextState.scrollPosition !== this.state.scrollPosition) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Animated.timing(this.state.fadeAnim, {\n        toValue: 1,\n        easing: Easing.bounce,\n        duration: 1000,\n        useNativeDriver: true\n      }).start();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.data !== this.props.data) {\n        this.setState(_extends({\n          fadeAnim: new Animated.Value(0)\n        }, initData(nextProps.data, this.props.height, this.props.gap, this.props.numberOfYAxisGuideLine)), function () {\n          Animated.timing(_this2.state.fadeAnim, {\n            toValue: 1,\n            easing: Easing.bounce,\n            duration: 1000,\n            useNativeDriver: true\n          }).start();\n        });\n      }\n    }\n  }, {\n    key: \"getTransform\",\n    value: function getTransform(rad, width) {\n      var x = (0 - width / 2) * Math.cos(rad) - (0 - width / 2) * Math.sin(rad);\n      var y = (0 - width / 2) * Math.sin(rad) + (0 - width / 2) * Math.cos(rad);\n      return [{\n        translateX: -1 * x - width / 2\n      }, {\n        translateY: -1 * y + width / 2\n      }, {\n        rotate: rad + 'rad'\n      }];\n    }\n  }, {\n    key: \"drawCoordinate\",\n    value: function drawCoordinate(index, start, end, backgroundColor, lineStyle, isBlank, lastCoordinate, seriesIndex) {\n      var _this3 = this;\n\n      var key = 'line' + index;\n      var dx = end.gap - start.gap;\n      var dy = end.ratioY - start.ratioY;\n      var size = Math.sqrt(dx * dx + dy * dy);\n      var angleRad = -1 * Math.atan2(dy, dx);\n      var height;\n      var top;\n      var topMargin = 20;\n\n      if (start.ratioY > end.ratioY) {\n        height = start.ratioY;\n        top = -1 * size;\n      } else {\n        height = end.ratioY;\n        top = -1 * (size - Math.abs(dy));\n      }\n\n      return _jsxs(View, {\n        style: {\n          height: this.props.height + topMargin,\n          justifyContent: 'flex-end'\n        },\n        children: [_jsxs(View, {\n          style: StyleSheet.flatten([{\n            width: dx,\n            height: height,\n            marginTop: topMargin\n          }, styles.coordinateWrapper]),\n          children: [_jsx(View, {\n            style: StyleSheet.flatten([{\n              top: top,\n              width: size,\n              height: size,\n              borderColor: isBlank ? backgroundColor : this.props.primaryColor,\n              borderTopWidth: 1,\n              transform: this.getTransform(angleRad, size)\n            }, styles.lineBox, lineStyle])\n          }), _jsx(View, {\n            style: StyleSheet.flatten([styles.absolute, {\n              height: height - Math.abs(dy) - 2,\n              backgroundColor: lastCoordinate ? '#FFFFFF00' : backgroundColor,\n              marginTop: Math.abs(dy) + 2\n            }])\n          })]\n        }), !lastCoordinate && seriesIndex === 0 ? _jsx(View, {\n          style: StyleSheet.flatten([styles.guideLine, {\n            width: dx,\n            borderRightColor: this.props.xAxisGridLineColor\n          }])\n        }) : null, seriesIndex === this.state.sortedData.length - 1 && _jsx(TouchableWithoutFeedback, {\n          onPress: function onPress() {\n            var selectedIndex = lastCoordinate ? index - 1 : index;\n            var emptyCount = 0;\n\n            _this3.state.sortedData.map(function (series) {\n              if (series.data[selectedIndex].isEmpty) emptyCount++;\n            });\n\n            if (emptyCount === _this3.state.sortedData.length) {\n              return null;\n            }\n\n            _this3.setState({\n              selectedIndex: selectedIndex\n            }, function () {\n              if (typeof _this3.props.onPress === 'function') {\n                _this3.props.onPress(selectedIndex);\n              }\n            });\n          },\n          children: _jsx(View, {\n            style: {\n              width: dx,\n              height: '100%',\n              position: 'absolute',\n              marginLeft: -1 * dx / 2,\n              backgroundColor: '#FFFFFF01'\n            }\n          })\n        })]\n      }, key);\n    }\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(index, point, seriesColor) {\n      var _this4 = this;\n\n      var key = 'point' + index;\n      var size = 8;\n      var color = !seriesColor ? this.props.primaryColor : seriesColor;\n\n      if (this.state.selectedIndex === index) {\n        color = this.props.selectedColor;\n      }\n\n      if (point.isEmpty || this.props.hidePoints) return null;\n      return _jsx(TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          _this4.setState({\n            selectedIndex: index\n          });\n        },\n        children: _jsx(View, {\n          style: StyleSheet.flatten([styles.pointWrapper, {\n            width: size,\n            height: size,\n            left: point.gap - size / 2,\n            bottom: point.ratioY - size / 2,\n            borderColor: color,\n            backgroundColor: color\n          }])\n        })\n      }, key);\n    }\n  }, {\n    key: \"drawValue\",\n    value: function drawValue(index, point) {\n      var key = 'pointvalue' + index;\n      var size = 200;\n      return _jsx(View, {\n        style: {\n          position: 'absolute',\n          left: index === 0 ? point.gap : point.gap - size / 2,\n          bottom: point.ratioY + 10,\n          backgroundColor: 'transparent',\n          width: index !== 0 ? 200 : undefined\n        },\n        children: this.drawCustomValue(index, point)\n      }, key);\n    }\n  }, {\n    key: \"drawCustomValue\",\n    value: function drawCustomValue(index, point) {\n      if (this.props.customValueRenderer) {\n        return this.props.customValueRenderer(index, point);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"drawCoordinates\",\n    value: function drawCoordinates(data, seriesColor, seriesIndex) {\n      var result = [];\n      var lineStyle = {\n        borderColor: !seriesColor ? this.props.primaryColor : seriesColor\n      };\n      var dataLength = data.length;\n\n      for (var i = 0; i < dataLength - 1; i++) {\n        result.push(this.drawCoordinate(i, data[i], data[i + 1], '#FFFFFF00', lineStyle, false, false, seriesIndex));\n      }\n\n      if (dataLength > 0) {\n        result.push(this.drawPoint(0, data[0], seriesColor));\n        result.push(this.drawValue(0, data[0], seriesColor));\n      }\n\n      for (var _i = 0; _i < dataLength - 1; _i++) {\n        result.push(this.drawPoint(_i + 1, data[_i + 1], seriesColor));\n        result.push(this.drawValue(_i + 1, data[_i + 1], seriesColor));\n      }\n\n      var lastData = _extends({}, data[dataLength - 1]);\n\n      var lastCoordinate = _extends({}, data[dataLength - 1]);\n\n      lastCoordinate.gap = lastCoordinate.gap + this.props.gap;\n      result.push(this.drawCoordinate(dataLength, lastData, lastCoordinate, '#FFFFFF', {}, true, true, seriesIndex));\n      return result;\n    }\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(p1, p2) {\n      return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n    }\n  }, {\n    key: \"drawSelected\",\n    value: function drawSelected(index) {\n      var _this5 = this;\n\n      if (this.state.sortedData.length === 0) return null;\n      var data = this.state.sortedData[0].data;\n      var dataObject = data[index];\n\n      if (typeof this.state.selectedIndex === 'number' && this.state.selectedIndex >= 0) {\n        if (!dataObject) {\n          return null;\n        }\n\n        var reverse = true;\n        var bottom = dataObject.ratioY;\n        var left = dataObject.gap;\n        var gap = 0;\n\n        if (index === data.length - 1 && index !== 0) {\n          left = data[index - 1].gap;\n          gap = dataObject.gap - left;\n        }\n\n        if (bottom > this.props.height * 2 / 3) {\n          reverse = false;\n        }\n\n        return _jsxs(View, {\n          style: StyleSheet.flatten([styles.selectedWrapper, {\n            left: left,\n            justifyContent: 'center'\n          }]),\n          children: [_jsx(View, {\n            style: StyleSheet.flatten([styles.selectedLine, {\n              backgroundColor: this.props.selectedColor,\n              marginLeft: gap\n            }])\n          }), _jsx(View, {\n            style: StyleSheet.flatten([styles.selectedBox]),\n            children: this.state.sortedData.map(function (series) {\n              var dataObject = series.data[_this5.state.selectedIndex];\n              return _jsxs(View, {\n                children: [dataObject.x ? _jsx(Text, {\n                  style: styles.tooltipTitle,\n                  children: dataObject.x\n                }) : null, _jsxs(View, {\n                  style: {\n                    flexDirection: 'row',\n                    paddingLeft: 5,\n                    alignItems: 'center'\n                  },\n                  children: [_jsx(View, {\n                    style: {\n                      width: 10,\n                      height: 5,\n                      marginRight: 3,\n                      borderRadius: 2,\n                      backgroundColor: !series.seriesColor ? _this5.props.primaryColor : series.seriesColor\n                    }\n                  }), _jsx(Text, {\n                    style: styles.tooltipValue,\n                    children: numberWithCommas(dataObject.y, false)\n                  })]\n                })]\n              }, series.seriesName);\n            })\n          })]\n        });\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var fadeAnim = this.state.fadeAnim;\n      return this.state.sortedData.length > 0 ? _jsxs(View, {\n        style: StyleSheet.flatten([styles.wrapper, {\n          backgroundColor: this.props.backgroundColor\n        }]),\n        children: [_jsx(View, {\n          style: styles.yAxisLabelsWrapper,\n          children: drawYAxisLabels(this.state.guideArray, this.props.height + 20, this.props.minValue, this.props.labelColor)\n        }), _jsx(View, {\n          children: _jsx(ScrollView, {\n            horizontal: true,\n            children: _jsxs(View, {\n              children: [_jsxs(View, {\n                ref: \"chartView\",\n                style: styles.chartViewWrapper,\n                children: [drawYAxis(this.props.yAxisColor), drawGuideLine(this.state.guideArray, this.props.yAxisGridLineColor), this.state.sortedData.map(function (obj, index) {\n                  return _jsx(Animated.View, {\n                    style: {\n                      transform: [{\n                        scaleY: fadeAnim\n                      }],\n                      flexDirection: 'row',\n                      alignItems: 'flex-end',\n                      height: '100%',\n                      position: index === 0 ? 'relative' : 'absolute',\n                      minWidth: 200,\n                      marginBottom: _this6.props.minValue && _this6.state.guideArray && _this6.state.guideArray.length > 0 ? -1 * _this6.state.guideArray[0][2] * _this6.props.minValue : null\n                    },\n                    children: _this6.drawCoordinates(obj.data, obj.seriesColor, index)\n                  }, 'animated_' + index);\n                }), this.drawSelected(this.state.selectedIndex)]\n              }), drawXAxis(this.props.xAxisColor), drawXAxisLabels(this.state.sortedData[0].data, this.props.gap, this.props.labelColor, this.props.showEvenNumberXaxisLabel)]\n            })\n          })\n        })]\n      }) : null;\n    }\n  }]);\n\n  return LineChart;\n}(React.Component);\n\nLineChart.defaultProps = {\n  data: [],\n  primaryColor: '#297AB1',\n  selectedColor: '#FF0000',\n  height: 100,\n  gap: 60,\n  showEvenNumberXaxisLabel: true,\n  onPointClick: function onPointClick(point) {},\n  numberOfYAxisGuideLine: 5\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden'\n  },\n  yAxisLabelsWrapper: {\n    paddingRight: 5\n  },\n  chartViewWrapper: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    margin: 0,\n    paddingRight: 0,\n    overflow: 'hidden'\n  },\n  coordinateWrapper: {\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignContent: 'flex-start'\n  },\n  lineBox: {\n    overflow: 'hidden',\n    justifyContent: 'flex-start'\n  },\n  guideLine: {\n    position: 'absolute',\n    height: '100%',\n    borderRightColor: '#e0e0e050',\n    borderRightWidth: 1\n  },\n  absolute: {\n    position: 'absolute',\n    width: '100%'\n  },\n  pointWrapper: {\n    position: 'absolute',\n    borderRadius: 10,\n    borderWidth: 1\n  },\n  selectedWrapper: {\n    position: 'absolute',\n    height: '100%',\n    alignItems: 'flex-start'\n  },\n  selectedLine: {\n    position: 'absolute',\n    width: 1,\n    height: '100%'\n  },\n  selectedBox: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 5,\n    opacity: 0.8,\n    borderColor: '#AAAAAA',\n    borderWidth: 1,\n    position: 'absolute',\n    padding: 3,\n    marginLeft: 5,\n    justifyContent: 'center'\n  },\n  tooltipTitle: {\n    fontSize: 10\n  },\n  tooltipValue: {\n    fontWeight: 'bold',\n    fontSize: 15\n  }\n});\nexport default LineChart;","map":{"version":3,"sources":["E:/Documents/Semester 7/MAD/Project/client/node_modules/react-native-pure-chart/examples/pure-chart/components/line-chart.js"],"names":["React","initData","drawYAxis","drawGuideLine","drawYAxisLabels","numberWithCommas","drawXAxis","drawXAxisLabels","LineChart","props","newState","data","height","gap","numberOfYAxisGuideLine","state","loading","sortedData","selectedIndex","nowHeight","nowWidth","scrollPosition","nowX","nowY","max","fadeAnim","Animated","Value","guideArray","drawCoordinates","bind","drawCoordinate","drawSelected","nextProps","nextState","timing","toValue","easing","Easing","bounce","duration","useNativeDriver","start","setState","rad","width","x","Math","cos","sin","y","translateX","translateY","rotate","index","end","backgroundColor","lineStyle","isBlank","lastCoordinate","seriesIndex","key","dx","dy","ratioY","size","sqrt","angleRad","atan2","top","topMargin","abs","justifyContent","StyleSheet","flatten","marginTop","styles","coordinateWrapper","borderColor","primaryColor","borderTopWidth","transform","getTransform","lineBox","absolute","guideLine","borderRightColor","xAxisGridLineColor","length","emptyCount","map","series","isEmpty","onPress","position","marginLeft","point","seriesColor","color","selectedColor","hidePoints","pointWrapper","left","bottom","undefined","drawCustomValue","customValueRenderer","result","dataLength","i","push","drawPoint","drawValue","lastData","p1","p2","pow","dataObject","reverse","selectedWrapper","selectedLine","selectedBox","tooltipTitle","flexDirection","paddingLeft","alignItems","marginRight","borderRadius","tooltipValue","seriesName","wrapper","yAxisLabelsWrapper","minValue","labelColor","chartViewWrapper","yAxisColor","yAxisGridLineColor","obj","scaleY","minWidth","marginBottom","xAxisColor","showEvenNumberXaxisLabel","Component","defaultProps","onPointClick","create","overflow","paddingRight","margin","alignContent","borderRightWidth","borderWidth","opacity","padding","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, TouchableWithoutFeedback, Text, Animated, Easing, ScrollView, StyleSheet } from 'react-native'\nimport {initData, drawYAxis, drawGuideLine, drawYAxisLabels, numberWithCommas, drawXAxis, drawXAxisLabels} from '../common'\n\nclass LineChart extends React.Component {\n  constructor (props) {\n    super(props)\n    let newState = initData(this.props.data, this.props.height, this.props.gap, this.props.numberOfYAxisGuideLine)\n    this.state = {\n      loading: false,\n      sortedData: newState.sortedData,\n      selectedIndex: null,\n      nowHeight: 200,\n      nowWidth: 200,\n      scrollPosition: 0,\n      nowX: 0,\n      nowY: 0,\n      max: newState.max,\n      fadeAnim: new Animated.Value(0),\n      guideArray: newState.guideArray\n    }\n\n    this.drawCoordinates = this.drawCoordinates.bind(this)\n    this.drawCoordinate = this.drawCoordinate.bind(this)\n    this.drawSelected = this.drawSelected.bind(this)\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (nextState.sortedData !== this.state.sortedData ||\n      nextState.selectedIndex !== this.state.selectedIndex ||\n      nextState.scrollPosition !== this.state.scrollPosition) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  componentDidMount () {\n    Animated.timing(this.state.fadeAnim, { toValue: 1, easing: Easing.bounce, duration: 1000, useNativeDriver: true }).start()\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.setState(Object.assign({\n        fadeAnim: new Animated.Value(0)\n      }, initData(nextProps.data, this.props.height, this.props.gap, this.props.numberOfYAxisGuideLine)), () => {\n        Animated.timing(this.state.fadeAnim, { toValue: 1, easing: Easing.bounce, duration: 1000, useNativeDriver: true }).start()\n      })\n    }\n  }\n\n  getTransform (rad, width) {\n    let x = (0 - width / 2) * Math.cos(rad) - (0 - width / 2) * Math.sin(rad)\n    let y = (0 - width / 2) * Math.sin(rad) + (0 - width / 2) * Math.cos(rad)\n\n    return [ {translateX: (-1 * x) - width / 2}, {translateY: (-1 * y) + width / 2}, { rotate: rad + 'rad' } ]\n  }\n\n  drawCoordinate (index, start, end, backgroundColor, lineStyle, isBlank, lastCoordinate, seriesIndex) {\n    let key = 'line' + index\n    let dx = end.gap - start.gap\n    let dy = end.ratioY - start.ratioY\n    let size = Math.sqrt(dx * dx + dy * dy)\n    let angleRad = -1 * Math.atan2(dy, dx)\n    let height\n    let top\n    let topMargin = 20\n\n    if (start.ratioY > end.ratioY) {\n      height = start.ratioY\n      top = -1 * size\n    } else {\n      height = end.ratioY\n      top = -1 * (size - Math.abs(dy))\n    }\n\n    return (\n      <View key={key} style={{\n        height: this.props.height + topMargin,\n        justifyContent: 'flex-end'\n      }}>\n\n        <View style={StyleSheet.flatten([{\n          width: dx,\n          height: height,\n          marginTop: topMargin\n        }, styles.coordinateWrapper])}>\n          <View style={StyleSheet.flatten([{\n            top: top,\n            width: size,\n            height: size,\n            borderColor: isBlank ? backgroundColor : this.props.primaryColor,\n            borderTopWidth: 1,\n            transform: this.getTransform(angleRad, size)\n          }, styles.lineBox, lineStyle])} />\n          <View style={StyleSheet.flatten([styles.absolute, {\n            height: height - Math.abs(dy) - 2,\n            backgroundColor: lastCoordinate ? '#FFFFFF00' : backgroundColor,\n            marginTop: Math.abs(dy) + 2\n          }])} />\n        </View>\n        {!lastCoordinate && seriesIndex === 0 ? (\n          <View style={StyleSheet.flatten([styles.guideLine, {\n            width: dx,\n            borderRightColor: this.props.xAxisGridLineColor\n          }])} />\n        ) : null}\n        {seriesIndex === this.state.sortedData.length - 1 && (\n          <TouchableWithoutFeedback onPress={() => {\n            let selectedIndex = lastCoordinate ? index - 1 : index\n\n            let emptyCount = 0\n            this.state.sortedData.map((series) => {\n              if (series.data[selectedIndex].isEmpty) emptyCount++\n            })\n            if (emptyCount === this.state.sortedData.length) {\n              return null\n            }\n            // console.log('point', selectedIndex, point)\n\n            this.setState({\n              selectedIndex: selectedIndex\n            }, () => {\n              if (typeof this.props.onPress === 'function') {\n                this.props.onPress(selectedIndex)\n              }\n            })\n          }}>\n            <View style={{\n              width: dx,\n              height: '100%',\n              position: 'absolute',\n              marginLeft: -1 * dx / 2,\n              backgroundColor: '#FFFFFF01'\n            }} />\n          </TouchableWithoutFeedback>\n        )}\n\n      </View>\n    )\n  }\n\n  drawPoint (index, point, seriesColor) {\n    let key = 'point' + index\n    let size = 8\n    let color = !seriesColor ? this.props.primaryColor : seriesColor\n    if (this.state.selectedIndex === index) {\n      color = this.props.selectedColor\n    }\n\n    if (point.isEmpty || this.props.hidePoints) return null\n\n    return (\n      <TouchableWithoutFeedback key={key} onPress={() => {\n        this.setState({selectedIndex: index})\n      }}>\n\n        <View style={StyleSheet.flatten([styles.pointWrapper, {\n          width: size,\n          height: size,\n\n          left: point.gap - size / 2,\n          bottom: point.ratioY - size / 2,\n\n          borderColor: color,\n          backgroundColor: color\n\n        }])} />\n      </TouchableWithoutFeedback>\n    )\n  }\n  drawValue (index, point) {\n    let key = 'pointvalue' + index\n    let size = 200\n    return (\n\n      <View key={key} style={{\n        position: 'absolute',\n        left: index === 0 ? point.gap : point.gap - size / 2,\n        bottom: point.ratioY + 10,\n        backgroundColor: 'transparent',\n        width: index !== 0 ? 200 : undefined\n\n      }} >\n        {this.drawCustomValue(index, point)}\n\n      </View>\n\n    )\n  }\n\n  drawCustomValue (index, point) {\n    if (this.props.customValueRenderer) {\n      return this.props.customValueRenderer(index, point)\n    } else {\n      return null\n    }\n  }\n\n  drawCoordinates (data, seriesColor, seriesIndex) {\n    let result = []\n    let lineStyle = {\n      borderColor: !seriesColor ? this.props.primaryColor : seriesColor\n    }\n    let dataLength = data.length\n\n    for (let i = 0; i < dataLength - 1; i++) {\n      result.push(this.drawCoordinate(i, data[i], data[i + 1], '#FFFFFF00', lineStyle, false, false, seriesIndex))\n    }\n\n    if (dataLength > 0) {\n      result.push(this.drawPoint(0, data[0], seriesColor))\n      result.push(this.drawValue(0, data[0], seriesColor))\n    }\n\n    for (let i = 0; i < dataLength - 1; i++) {\n      result.push(this.drawPoint((i + 1), data[i + 1], seriesColor))\n      result.push(this.drawValue((i + 1), data[i + 1], seriesColor))\n    }\n\n    let lastData = Object.assign({}, data[dataLength - 1])\n    let lastCoordinate = Object.assign({}, data[dataLength - 1])\n    lastCoordinate.gap = lastCoordinate.gap + this.props.gap\n    result.push(this.drawCoordinate((dataLength), lastData, lastCoordinate, '#FFFFFF', {}, true, true, seriesIndex))\n\n    return result\n  }\n\n  getDistance (p1, p2) {\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2))\n  }\n\n  drawSelected (index) {\n    if (this.state.sortedData.length === 0) return null\n    let data = this.state.sortedData[0].data\n    let dataObject = data[index]\n    if (typeof (this.state.selectedIndex) === 'number' && this.state.selectedIndex >= 0) {\n      if (!dataObject) {\n        return null\n      }\n      let reverse = true\n      let bottom = dataObject.ratioY\n\n      let left = dataObject.gap\n      let gap = 0\n      if (index === data.length - 1 && index !== 0) {\n        left = data[index - 1].gap\n        gap = dataObject.gap - left\n      }\n      if (bottom > this.props.height * 2 / 3) {\n        reverse = false\n      }\n\n      return (\n        <View style={StyleSheet.flatten([styles.selectedWrapper, {\n          left: left,\n          justifyContent: 'center'\n        }])}>\n          <View style={StyleSheet.flatten([styles.selectedLine, {\n            backgroundColor: this.props.selectedColor,\n            marginLeft: gap\n          }])} />\n\n          <View style={StyleSheet.flatten([styles.selectedBox])}>\n            {this.state.sortedData.map((series) => {\n              let dataObject = series.data[this.state.selectedIndex]\n              return (\n                <View key={series.seriesName}>\n                  {dataObject.x ? (\n                    <Text style={styles.tooltipTitle}>{dataObject.x}</Text>\n                ) : null}\n                  <View style={{flexDirection: 'row', paddingLeft: 5, alignItems: 'center'}}>\n                    <View style={{\n                      width: 10,\n                      height: 5,\n                      marginRight: 3,\n                      borderRadius: 2,\n                      backgroundColor: !series.seriesColor ? this.props.primaryColor : series.seriesColor\n                    }} />\n                    <Text style={styles.tooltipValue}>{numberWithCommas(dataObject.y, false)}</Text>\n                  </View>\n                </View>\n              )\n            })}\n\n          </View>\n\n        </View>\n      )\n    } else {\n      return null\n    }\n  }\n\n  render () {\n    let {fadeAnim} = this.state\n    return (\n      this.state.sortedData.length > 0 ? (\n        <View style={StyleSheet.flatten([styles.wrapper, {\n          backgroundColor: this.props.backgroundColor\n        }])}>\n          <View style={styles.yAxisLabelsWrapper}>\n            {drawYAxisLabels(this.state.guideArray, this.props.height + 20, this.props.minValue, this.props.labelColor)}\n\n          </View>\n\n          <View>\n            <ScrollView horizontal>\n              <View>\n\n                <View ref='chartView' style={styles.chartViewWrapper}>\n\n                  {drawYAxis(this.props.yAxisColor)}\n                  {drawGuideLine(this.state.guideArray, this.props.yAxisGridLineColor)}\n                  {this.state.sortedData.map((obj, index) => {\n                    return (\n                      <Animated.View key={'animated_' + index} style={{\n                        transform: [{scaleY: fadeAnim}],\n                        flexDirection: 'row',\n                        alignItems: 'flex-end',\n                        height: '100%',\n                        position: index === 0 ? 'relative' : 'absolute',\n                        minWidth: 200,\n                        marginBottom: this.props.minValue && this.state.guideArray && this.state.guideArray.length > 0 ? -1 * this.state.guideArray[0][2] * this.props.minValue : null\n                      }} >\n                        {this.drawCoordinates(obj.data, obj.seriesColor, index)}\n                      </Animated.View>\n                    )\n                  })}\n                  {this.drawSelected(this.state.selectedIndex)}\n\n                </View>\n\n                {drawXAxis(this.props.xAxisColor)}\n                {drawXAxisLabels(this.state.sortedData[0].data, this.props.gap, this.props.labelColor, this.props.showEvenNumberXaxisLabel)}\n              </View>\n\n            </ScrollView>\n          </View>\n\n        </View>\n      ) : null\n\n    )\n  }\n}\n\nLineChart.defaultProps = {\n  data: [],\n  primaryColor: '#297AB1',\n  selectedColor: '#FF0000',\n  height: 100,\n  gap: 60,\n  showEvenNumberXaxisLabel: true,\n  onPointClick: (point) => {\n\n  },\n  numberOfYAxisGuideLine: 5\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden'\n  },\n  yAxisLabelsWrapper: {\n    paddingRight: 5\n  },\n  chartViewWrapper: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    margin: 0,\n    paddingRight: 0,\n    overflow: 'hidden'\n  },\n  coordinateWrapper: {\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignContent: 'flex-start'\n  },\n  lineBox: {\n    overflow: 'hidden',\n    justifyContent: 'flex-start'\n  },\n  guideLine: {\n    position: 'absolute',\n    height: '100%',\n    borderRightColor: '#e0e0e050',\n    borderRightWidth: 1\n  },\n  absolute: {\n    position: 'absolute',\n    width: '100%'\n  },\n  pointWrapper: {\n    position: 'absolute',\n    borderRadius: 10,\n    borderWidth: 1\n  },\n  selectedWrapper: {\n    position: 'absolute',\n    height: '100%',\n    alignItems: 'flex-start'\n  },\n  selectedLine: {\n    position: 'absolute',\n    width: 1,\n    height: '100%'\n  },\n  selectedBox: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 5,\n    opacity: 0.8,\n    borderColor: '#AAAAAA',\n    borderWidth: 1,\n    position: 'absolute',\n    padding: 3,\n    marginLeft: 5,\n    justifyContent: 'center'\n  },\n  tooltipTitle: {fontSize: 10},\n  tooltipValue: {fontWeight: 'bold', fontSize: 15}\n})\n\nexport default LineChart\n"]},"metadata":{},"sourceType":"module"}